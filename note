| M·ª•c ƒë√≠ch     | C√¢u l·ªánh                 |
| ------------ | ------------------------ |
| T·∫°o list     | `arr = [1, 2, 3]`        |
| Th√™m ph·∫ßn t·ª≠ | `arr.append(x)`          |
| S·∫Øp x·∫øp tƒÉng | `arr.sort()`             |
| S·∫Øp x·∫øp gi·∫£m | `arr.sort(reverse=True)` |
| L·∫•y ƒë·ªô d√†i   | `len(arr)`               |
| Duy·ªát list   | `for x in arr:`          |
| C·∫Øt list     | `arr[1:4]`               |
| ƒê·∫£o list     | `arr[::-1]`              |
| T√¨m max/min  | `max(arr), min(arr)`     |
set
| M·ª•c ƒë√≠ch         | C√¢u l·ªánh     |     |
| ---------------- | ------------ | --- |
| T·∫°o set          | `s = set()`  |     |
| Th√™m ph·∫ßn t·ª≠     | `s.add(x)`   |     |
| Ki·ªÉm tra t·ªìn t·∫°i | `if x in s:` |     |
| Giao t·∫≠p         | `a & b`      |     |
| H·ª£p t·∫≠p          | \`a          | b\` |
| Hi·ªáu t·∫≠p         | `a - b`      |     |

DICTIONARY
my_dict = {
    "name": "Alice",
    "age": 20,
    "city": "Da Nang"
}
person = {"name": "Bob", "age": 25}
print(person["name"])        # üëâ Bob
person["city"] = "Hanoi"     # th√™m m·ªõi
print(person["city"])        # üëâ Hanoi

for person in people:
    print(person["name"], "-", person["age"])


| M·ª•c ƒë√≠ch         | C√¢u l·ªánh                                            |
| ---------------- | --------------------------------------------------- |
| T·∫°o dict         | `d = {}`                                            |
| G√°n gi√° tr·ªã      | `d['a'] = 10`                                       |
| Duy·ªát dict       | `for key, value in d.items():`                      |
| Ki·ªÉm tra t·ªìn t·∫°i | `if 'a' in d:`                                      |
| ƒê·∫øm t·∫ßn su·∫•t     | `from collections import Counter`<br>`Counter(arr)` |

| C·∫•u tr√∫c | L·ªánh                                                                                     |
| -------- | ---------------------------------------------------------------------------------------- |
| Stack    | `stack = []` <br> `stack.append(x)` <br> `stack.pop()`                                   |
| Queue    | `from collections import deque` <br> `q = deque()` <br> `q.append(x)` <br> `q.popleft()` |

for i in range(n):
    # l·∫∑p t·ª´ 0 ƒë·∫øn n-1

while ƒëi·ªÅu_ki·ªán:
    # v√≤ng l·∫∑p ƒëi·ªÅu ki·ªán

if x == y:
    # ƒëi·ªÅu ki·ªán
elif x > y:
    # ...
else:
    # ...
# ham tu dinh nghia
def my_function(x):
    return x * x

| Th∆∞ vi·ªán      | M·ª•c ƒë√≠ch                                   |
| ------------- | ------------------------------------------ |
| `math`        | C√°c h√†m to√°n h·ªçc nh∆∞ `sqrt`, `gcd`, `ceil` |
| `heapq`       | H√†ng ƒë·ª£i ∆∞u ti√™n (min heap)                |
| `collections` | `Counter`, `deque`, `defaultdict`          |
| `itertools`   | T·ªï h·ª£p, ho√°n v·ªã                            |
 
 docfile 
 with open("input.txt", "r") as f:
    data = f.read()  # ƒë·ªçc to√†n b·ªô n·ªôi dung
    print(data)

#doc tung dong
with open("input.txt", "r") as f:
    for line in f:
        print(line.strip())  # lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng

with open("output.txt", "w") as f:
    f.write("Hello, file!\n")
    f.write("Ghi d√≤ng th·ª© hai\n")

#ghi nhieu dong 
lines = ["Dong 1", "Dong 2", "Dong 3"]
with open("output.txt", "w") as f:
    for line in lines:
        f.write(line + "\n")

#doc so
with open("input.txt", "r") as f:
    numbers = list(map(int, f.readline().split()))
    print(numbers)  # [1, 2, 3, 4, 5]
